<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.or.ddit.prod.dao.IProdDAO">
<sql id="searchFrag">
	<where>
		<if test="searchVO!=null">
			<if	test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.prod_lgu)">
				PROD_LGU = #{searchVO.prod_lgu}
			</if>
			<if	test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.prod_buyer)">
				AND PROD_BUYER = #{searchVO.prod_buyer}
			</if>
			<if	test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.prod_name)">
				AND INSTR(PROD_NAME, #{searchVO.prod_name}) > 0
			</if>
		</if>
	</where>
</sql>
  	<select id="selectProdCount" parameterType="pagingInfoVO" resultType="int">
  		SELECT COUNT(PROD_ID) FROM PROD
  		<include refid="searchFrag" />
  	</select>
  	
  	<select id="selectProdList" parameterType="PagingInfoVO" resultType="ProdVO">
	SELECT B.* 
    FROM (
    SELECT A.*, ROWNUM rnum
  		FROM(
  			SELECT PROD_ID, PROD_NAME, PROD_LGU, PROD_BUYER, PROD_COST, PROD_PRICE,
  				PROD_MILEAGE, BUYER_NAME , LPROD_NM
  			FROM PROD INNER JOIN LPROD ON (PROD_LGU = LPROD_GU)
  				INNER JOIN BUYER ON (PROD_BUYER = BUYER_ID)
  				<include refid="searchFrag" />
  				ORDER BY PROD_LGU DESC
			) A
        ) B
     <![CDATA[
    	WHERE rnum >= #{startRow} AND rnum<= #{endRow}
	 ]]>		  	
  	</select>
  	
  	<resultMap type="ProdVO" id="prodMap" autoMapping="true" >
<!--   		<result column="PROD_ID" property="prod_id" /> -->
<!-- 	식별자를 설정. 식별자를 기준으로 중복제거함 -->
		<id column="PROD_ID" property="prod_id" />
	
<!--   		<association property="buyer" javaType="BuyerVO" autoMapping="true" > -->
<!--   			<id column="BUYER_ID" property="buyer_id" /> -->
<!--   			<result column="BUYER_ID" property="buyer_id" /> -->
<!--   		</association> -->
  		<collection property="memberList" javaType="java.util.List" ofType="MemberVO" autoMapping="true" >
  			<id column="MEM_ID" property="mem_id" />
  		</collection>
  	</resultMap>
  	<select id="selectProd" parameterType="String" resultMap="prodMap">
  	
  		SELECT  PROD_ID, PROD_NAME,PROD_PROPERSTOCK,PROD_TOTALSTOCK,
				PROD_IMG,PROD_OUTLINE,PROD_SALE,PROD_PRICE,PROD_COST,PROD_BUYER,PROD_LGU,
				PROD_UNIT,PROD_DETAIL,PROD_DELIVERY,PROD_COLOR,PROD_MILEAGE,
				PROD_QTYSALE,TO_CHAR(PROD_INSDATE,'YYYY-MM-DD') PROD_INSDATE,PROD_QTYIN,PROD_SIZE, BUYER_NAME "buyer.buyer_name" , 
				(SELECT LPROD_NM FROM LPROD WHERE LPROD_GU = PROD_LGU) ,
				BUYER_ID "buyer.buyer_id", BUYER_CHARGER "buyer.buyer_charger", BUYER_COMTEL "buyer.buyer_comtel", BUYER_ADD1 "buyer.buyer_add1", 
				MEM_ID, MEM_NAME, MEM_HP, MEM_ADD1, MEM_MAIL
  		FROM PROD
  				INNER JOIN BUYER ON (PROD_BUYER = BUYER_ID)
  				LEFT OUTER JOIN(
  					SELECT DISTINCT CART_PROD,MEM_ID,  MEM_NAME, MEM_HP, MEM_ADD1, MEM_MAIL
  					FROM CART INNER JOIN MEMBER ON (CART_MEMBER=MEM_ID)
  				) ON (PROD_ID=CART_PROD)
  		WHERE PROD_ID = #{prod_id}
  	</select>
  	<update id="updateProd" parameterType="ProdVO">
		 UPDATE PROD SET
			PROD_name=#{prod_name},PROD_properstock=#{prod_properstock},PROD_totalstock=#{prod_totalstock},
			PROD_outline=#{prod_outline},PROD_sale=#{prod_sale},PROD_price=#{prod_price},PROD_cost=#{prod_cost},PROD_buyer=#{prod_buyer},PROD_lgu=#{prod_lgu},
			PROD_unit=#{prod_unit},PROD_detail=#{prod_detail},PROD_delivery=#{prod_delivery},PROD_color=#{prod_color},PROD_mileage=#{prod_mileage},
			PROD_qtysale=#{prod_qtysale},PROD_qtyin=#{prod_qtyin},PROD_size=#{prod_size}
			<if	test="@org.apache.commons.lang3.StringUtils@isNotBlank(prod_img)">
				, PROD_IMG=#{prod_img}
			</if>
			WHERE PROD_ID =#{prod_id}
  	</update>
  	
  	<insert id="insertProd" parameterType="ProdVO">
      <selectKey order="BEFORE" resultType="String" keyProperty="prod_id"> <!-- keyProperty : 만든 값을 어디에 넣을건지를 결정 -->
         SELECT #{prod_lgu}||LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PROD_ID), 5)),0) + 1, 6, '0')
         FROM PROD
         WHERE PROD_LGU = #{prod_lgu}
      </selectKey>
      INSERT INTO prod (
          PROD_ID,    PROD_NAME,    PROD_LGU,
          PROD_BUYER,    PROD_COST,    PROD_PRICE,
          PROD_SALE,    PROD_OUTLINE,    PROD_DETAIL,
          PROD_IMG,    PROD_TOTALSTOCK,    PROD_INSDATE,
          PROD_PROPERSTOCK,    PROD_SIZE,    PROD_COLOR,
          PROD_DELIVERY,    PROD_UNIT,    PROD_QTYIN,    
          PROD_QTYSALE,    PROD_MILEAGE
      ) VALUES (
         #{prod_id},    #{prod_name},    #{prod_lgu},
          #{prod_buyer},    #{prod_cost},    #{prod_price},
          #{prod_sale},    #{prod_outline},    #{prod_detail},
          #{prod_img},    #{prod_totalstock},    TO_DATE(#{prod_insdate},'YYYY-MM-DD'),
          #{prod_properstock},    #{prod_size},    #{prod_color},
          #{prod_delivery},    #{prod_unit},    #{prod_qtyin},    
          #{prod_qtysale},    #{prod_mileage,jdbcType=NUMERIC}
      )
   </insert>
</mapper>
